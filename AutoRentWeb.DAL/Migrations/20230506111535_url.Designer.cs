// <auto-generated />
using System;
using AutoRentWeb.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AutoRentWeb.DAL.Migrations
{
    [DbContext(typeof(AutoRentDbContext))]
    [Migration("20230506111535_url")]
    partial class url
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AutoRentWebDomain.Entity.Arendator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankCardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankCardId")
                        .IsUnique()
                        .HasFilter("[BankCardId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Arendator");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.Auto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyDelegateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TypeCarId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDelegateId");

                    b.HasIndex("TypeCarId");

                    b.ToTable("Auto");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.BankCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Bill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CVV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankCard");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArendatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArendatorId")
                        .IsUnique();

                    b.ToTable("Basket");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.CompanyDelegate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CompanyDelegate");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutoId")
                        .HasColumnType("int");

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutoId");

                    b.HasIndex("BasketId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.TypeCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeCar");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.Arendator", b =>
                {
                    b.HasOne("AutoRentWebDomain.Entity.BankCard", "BankCard")
                        .WithOne("Arendator")
                        .HasForeignKey("AutoRentWebDomain.Entity.Arendator", "BankCardId");

                    b.HasOne("AutoRentWebDomain.Entity.User", "User")
                        .WithOne("Arendator")
                        .HasForeignKey("AutoRentWebDomain.Entity.Arendator", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankCard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.Auto", b =>
                {
                    b.HasOne("AutoRentWebDomain.Entity.CompanyDelegate", "CompanyDelegate")
                        .WithMany("Autos")
                        .HasForeignKey("CompanyDelegateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoRentWebDomain.Entity.TypeCar", "TypeCar")
                        .WithMany("Autos")
                        .HasForeignKey("TypeCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyDelegate");

                    b.Navigation("TypeCar");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.Basket", b =>
                {
                    b.HasOne("AutoRentWebDomain.Entity.Arendator", "Arendator")
                        .WithOne("Basket")
                        .HasForeignKey("AutoRentWebDomain.Entity.Basket", "ArendatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arendator");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.CompanyDelegate", b =>
                {
                    b.HasOne("AutoRentWebDomain.Entity.Company", "Company")
                        .WithOne("CompanyDelegate")
                        .HasForeignKey("AutoRentWebDomain.Entity.CompanyDelegate", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoRentWebDomain.Entity.User", "User")
                        .WithOne("CompanyDelegate")
                        .HasForeignKey("AutoRentWebDomain.Entity.CompanyDelegate", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.Order", b =>
                {
                    b.HasOne("AutoRentWebDomain.Entity.Auto", "Auto")
                        .WithMany()
                        .HasForeignKey("AutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoRentWebDomain.Entity.Basket", "Basket")
                        .WithMany("Orders")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auto");

                    b.Navigation("Basket");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.Arendator", b =>
                {
                    b.Navigation("Basket");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.BankCard", b =>
                {
                    b.Navigation("Arendator");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.Basket", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.Company", b =>
                {
                    b.Navigation("CompanyDelegate");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.CompanyDelegate", b =>
                {
                    b.Navigation("Autos");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.TypeCar", b =>
                {
                    b.Navigation("Autos");
                });

            modelBuilder.Entity("AutoRentWebDomain.Entity.User", b =>
                {
                    b.Navigation("Arendator");

                    b.Navigation("CompanyDelegate");
                });
#pragma warning restore 612, 618
        }
    }
}
